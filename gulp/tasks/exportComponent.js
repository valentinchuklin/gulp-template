const gulp = require('gulp');

var from = ''; //Создадим пустую строку для переменной пути
const exportComponent = (cb) => {
  let indexOfKey = 0;
  let indexOfSrc = -1;
  process.argv.forEach((el) => {
    if (el == '--from') {
      indexOfSrc = indexOfKey + 1;
      from = process.argv[indexOfSrc];
    } else {
      indexOfKey++;
    }
  });
  cb();
}
const sass = require('gulp-sass');
sass.compiler = require('node-sass');
const autoprefixer = require('autoprefixer');
const postcss = require('gulp-postcss');
const sortMediaQueries = require('postcss-sort-media-queries');
const processors = [
  autoprefixer(),
  sortMediaQueries({
    sort: 'mobile-first'
  })
];
const sassToOutput = () => {
  console.log(from);
  return gulp.src(from + '/**/*.sass')
    .pipe(sass({ outputStyle: 'expanded' }).on('error', sass.logError))
    .pipe(postcss(processors))
    .pipe(gulp.dest('./lab/export/'))
}
const pug = require('gulp-pug');
const htmlBeautify = require('gulp-html-beautify');
const htmlmin = require('gulp-htmlmin');
const htmlBeautifyOptions = {
  "indent_size": 2
}
const htmlminOptions = {
  collapseWhitespace: true,
  includeAutoGeneratedTags: false
}
const posthtml = require('gulp-posthtml')
const posthtmlWebpWidthSizes = require('../posthtml/posthtmlWebpWidthSizes');
const pugToOutPut = (cb) => {
  return gulp.src(from + '/**/*.pug')
    .pipe(pug())
    .pipe(posthtml([posthtmlWebpWidthSizes()]))
    .pipe(htmlmin(htmlminOptions))
    .pipe(htmlBeautify(htmlBeautifyOptions))
    .pipe(gulp.dest('./lab/export/'))
}
const copyAssets = (cb) => {
  return gulp.src([from + '/**/*.*', '!' + from + '/**/*.sass', '!' + from + '/**/*.pug'])
    .pipe(gulp.dest('./lab/export/'))
}
// При необходимости можно включить функцию транскомпиляции кода
// const babel = require('gulp-babel');
// const transCompileES = () => {
//   return gulp.src('./lab/export/**/*.js')
//     .pipe(babel({
//       presets: ['@babel/env']
//     }))
//     .pipe(gulp.dest('./lab/export/'))
// }
module.exports = gulp.series(exportComponent, sassToOutput, pugToOutPut, copyAssets);