const gulp = require('gulp');
const gulpClean = require('gulp-clean'); //Очистка
const replace = require('gulp-replace'); //Замена
const rename = require('gulp-rename'); //Переименование

//Очистка папки build перед заданием
const buildCleanFunction = function () {
  return gulp.src('./build/*', { read: false })
    .pipe(gulpClean());
}

//Pug2html
const pug = require('gulp-pug');
const htmlmin = require('gulp-htmlmin');
const posthtml = require('gulp-posthtml')
const posthtmlWebpWidthSizes = require('../posthtml/posthtmlWebpWidthSizes');
const htmlminOptions = {
  collapseWhitespace: true,
  includeAutoGeneratedTags: false,
  removeComments: true,
  collapseBooleanAttributes: true,
  preserveLineBreaks: true
}
const pugfunction = function pug2html(cb) {
  var cacheTimeStamp = new Date().getTime();
  return gulp.src(['./src/**/index.pug', '!./src/components/**', '!./src/third-party/**'])
    .pipe(pug())
    .pipe(posthtml([posthtmlWebpWidthSizes()]))
    .pipe(replace('style.css', 'style-min.css?t=' + cacheTimeStamp))
    .pipe(replace('script.js', 'script-min.js?t=' + cacheTimeStamp))
    .pipe(htmlmin(htmlminOptions))
    .pipe(gulp.dest('./build/'));
}
//Sass function
const sass = require('gulp-sass')
sass.compiler = require('node-sass')
const autoprefixer = require('autoprefixer')
const postcss = require('gulp-postcss')
const sortMediaQueries = require('postcss-sort-media-queries')
const cssmin = require('gulp-cssmin')
const processors = [
  autoprefixer(),
  sortMediaQueries({
    sort: 'mobile-first'
  })
]

const sassfunction = function () {
  return gulp.src(['./src/**/style.sass', '!./src/components/**', '!./src/third-party/**'])
    .pipe(sass({ outputStyle: 'expanded' }).on('error', sass.logError))
    .pipe(postcss(processors))
    .pipe(cssmin())
    .pipe(rename(function (path) { path.basename += "-min" }))
    .pipe(gulp.dest('./build/'));
}

//JS function
//Функция сборщик скриптов страницы из build-script.pug в script.js, если требуется
const uglify = require('gulp-uglify-es').default;
const babel = require('gulp-babel');
const notify = require('gulp-notify');
const buildCustomStyle = function () {
  return gulp.src(['./src/**/build-script.pug', '!./src/components/**', '!./src/third-party/**'])
    .pipe(pug())
    .pipe(rename(function (path) {
      path.basename = 'script';
      path.extname = '.js'
    }))
    .pipe(babel({
      presets: ['@babel/env']
    }))
    .pipe(uglify({
      toplevel: true
    }).on('error', notify.onError()))
    .pipe(gulp.dest('./build/'));
}
//Если скрипт небольшой минуем этап сборки и пишем сразу в script.js
const jsMinFunction = function () {
  return gulp.src(['./src/**/script.js', '!./src/components/**', '!./src/third-party/**'])
    .pipe(babel({
      presets: ['@babel/env']
    }))
    .pipe(uglify({
      toplevel: true
    }).on('error', notify.onError()))
    .pipe(gulp.dest('./build/'));
}
//Удаляем жирный JS
const cleanJsFunction = function () {
  return gulp.src(['./build/**/script.js'], { read: false })
    .pipe(gulpClean());
}
//Создаём серию
const jsfunction = gulp.series(buildCustomStyle, jsMinFunction, cleanJsFunction);

//PHP function
const phpfunction = function () {
  return gulp.src(['./src/**/*.php', '!./src/components/**', '!./src/third-party/**'])
    .pipe(gulp.dest('./build/'));
}
//Оптимизация и копирование картинок
const imagemin = require('gulp-imagemin');
const imgCompress = require('imagemin-jpeg-recompress');
const cache = require('gulp-cache');

const imgMinFunction = function () {
  return gulp.src(['./src/**/*.svg', './src/**/*.jpg', './src/**/*.png', './src/**/*.gif', '!./src/components/**', '!./src/third-party/**'])
    .pipe(
      cache(
        imagemin([
          imgCompress({
            loops: 4,
            min: 70,
            max: 75,
            quality: 'high'
          }),
          imagemin.gifsicle(),
          imagemin.optipng(),
          imagemin.svgo()
        ])
      )
    )
    .pipe(gulp.dest('build/'));
}
const webp = require('gulp-webp');
const webpFunction = function (input, output) {
  return gulp.src(['src/**/*.png', 'src/**/*.jpg', 'src/**/*.gif', '!./src/components/**', '!./src/third-party/**'])
    .pipe(webp())
    .pipe(gulp.dest('build/'));
}
const imgfunction = gulp.series(imgMinFunction, webpFunction);
//Копирование шрифтов
const copyfontsfunction = function () {
  return gulp.src('./src/common/fonts/*.woff*')
    .pipe(gulp.dest('./build/common/fonts/'));
}
//Копирование сторонних скриптов
const copyThirdPartyFunction = function () {
  return gulp.src('./src/third-party/**')
    .pipe(gulp.dest('./build/third-party/'));
}

//Live server - проверим результат в браузере
const browsersync = require('browser-sync')
const liveserver = function bsync() {
  browsersync.init({
    watch: true,
    server: {
      baseDir: "./build/",
    }
  })
}

//Final task
const build = gulp.series(buildCleanFunction, pugfunction, sassfunction, jsfunction, phpfunction, imgfunction, copyfontsfunction, copyThirdPartyFunction, liveserver)

module.exports = gulp.series(build)